// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let squareVerifier = artifacts.require('SquareVerifier');

// Test verification with correct proof
let zkProof = require('../../zokrates/code/square/proof');

// - use the contents from proof.json generated from zokrates steps
contract('TestSquareVerifier', accounts => {

    const account_one = accounts[0];

    describe('Test verification with correct proof', function () {
        beforeEach(async function () {

            this.contract = await squareVerifier.new({ from: account_one });

        });

        it('verification with correct proof', async function () {
            let proof = zkProof.proof;
            let result = await this.contract.verifyTx.call(  proof.a,  proof.b,  proof.c, zkProof.inputs, { from: account_one });

            assert.equal(result, true, "Proof should be valid");
        });

        // Test verification with incorrect proof
        it('Test verification with incorrect proof', async function () {
            let inputs = [4, 16];
            let proof = zkProof.proof;
            let result = await this.contract.verifyTx.call(  proof.a,  proof.b,  proof.c, inputs, { from: account_one });

            assert.equal(result, false, "Proof invalid");
        })
    })
});